##################################################################################################################################################################
# PROJECT: TM_MLOps
# CHAPTER: Util
# SECTION: metric
# AUTHOR: Yang et al.
# DATE: since 25.05.26
##################################################################################################################################################################

##################################################################################################################################################################
# import libraries
##################################################################################################################################################################

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
from scipy import stats
from itertools import product
#from src.common.config import *
import time

##################################################################################################################################################################
# user-defined utility functions
##################################################################################################################################################################

# def hit_ratio(y_true, y_pred):
#     """
#     Calculate the hit ratio (accuracy) of the model
#     """
#     return np.sum(y_true == y_pred) / len(y_true)

def hit_ratio(y_true, y_pred, std):
    hit = abs(np.array(y_true) - np.array(y_pred)) < std

    return hit.sum()/len(hit) # hit.sum()/len(hit)*100